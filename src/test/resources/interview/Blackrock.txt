2,5
4,8
7,null
8,2

map.entrySet().stream().filter(entry->{entry.getValue()}).map()

4


80,90,60,30,85,25,50

 1   2   3   4   5   6   7
100  80  60  70  60  70  85
Find the maximum profit?

arr

find MinIndex
find max form 3 - arr.length
return max-min

public Map<Integer,Integer> findOccurences(List<Integer> arr){
Map<Integer,Integer> map=new Integer<>();



public final class Employee{

private final int id;

private final List<Address> address;

public Emloyee(int id,List<Address> address){
this.id=id;

}

public ind getId(){
return this.id;
}

p


}

What is the difference between 
String s1 = "Test" and 
String  s2 = new String("Test")? 

Which is better and why?



EmpId   FullName        ManagerId   DateOfJoining   City
121     John Snow       321         01/31/2014      Toronto
321     Walter White    986         01/30/2015      California
421     Kuldeep Rana    876         27/11/2016      New Delhi
Find all the employees who are also the managers?

select EmpId, FullName from Employee employee inner join Employee manager on employee.emplId=manager.managerId


public class FinallyExecution {
    public static void main(String[] args) {    
        try{            
            FinallyExecution.divide(100, 0);
}
        finally{
            System.out.println("finally in main");
        }
    }   
    public static void divide(int n, int div){
        try{
            int ans = n/div; 
}
        finally{
            System.out.println("finally of divide");
        }
    }
}

finally of divide
finally in main




                                     IOHD-    Diameter---------     call control ----            NCC----Charging ,  Rating  --
							
 Policy 
			            Notification Service

                                                       Service manager   

Public class Cache{
Private Map<String,String> map=new hashMap<>();

Public void getData(String key,String value){
If(map.containsKey(key)){
Return map.get(key);
}
Else{

}
Private String loadData(String key){
BufferedReader br=new BufferedReader
}
}

}








10 20 

Public void printIncrementer(){
Int timeInterval=10;
Int sum=timeInterval;
While(true){

Thread.sleep(timeInterval);
System.out.println(sum);

Sum+=timeInterval;

}


}

